-- drop & create a stored procedure to load the Bronze layer
DROP PROCEDURE IF EXISTS bronze.load_bronze;
CREATE PROCEDURE bronze.load_bronze()
LANGUAGE plpgsql
AS $$

-- calculating the duration for each process and the total batch run
DECLARE
	bronze_start_time TIMESTAMP;
	start_time TIMESTAMP;
	end_time TIMESTAMP;
	elapsed_time INTERVAL;
	bronze_elapsed_time INTERVAL;
BEGIN
	RAISE NOTICE '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++';
	RAISE NOTICE 'Loading the Bronze Layer';
	RAISE NOTICE '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++';


	-- create the schema if it doesn't exist
	CREATE SCHEMA IF NOT EXISTS bronze;

	start_time := CLOCK_TIMESTAMP();
	bronze_start_time := CLOCK_TIMESTAMP();
	BEGIN
		-- create the crm_cust_info table
		DROP TABLE IF EXISTS bronze.crm_cust_info CASCADE;
		CREATE TABLE IF NOT EXISTS bronze.crm_cust_info (
			cst_id INT,
			cst_key VARCHAR(50),
			cst_firstname VARCHAR(50),
			cst_lastname VARCHAR(50),
			cst_marital_status VARCHAR(50),
			cst_gndr VARCHAR(50),
			cst_create_date DATE
		);
	
		-- Truncate the table
		-- copy the data from the csv file into the database
		RAISE NOTICE '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++';
		RAISE NOTICE 'loading CRM tables';
		RAISE NOTICE '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++';
		
		RAISE NOTICE 'Truncate Table: bronze.crm_cust_info';
		TRUNCATE TABLE bronze.crm_cust_info; 
		
		RAISE NOTICE 'Insert Data Into: bronze.crm_cust_info';
		COPY bronze.crm_cust_info (cst_id, cst_key, cst_firstname, cst_lastname, cst_marital_status, cst_gndr, cst_create_date)
			FROM 'C:\Users\Stanford\Documents\SQL\sql-data-warehouse-project\sql-data-warehouse-project\datasets\source_crm\cust_info.csv' 
			DELIMITER ',' CSV HEADER;

	EXCEPTION
		WHEN OTHERS THEN
			-- Catch any errors that occur and raise a notice
			RAISE NOTICE 'Error while loading bronze.crm_cust_info: %', SQLERRM;
	END;
	end_time := CLOCK_TIMESTAMP();
	elapsed_time := end_time - start_time;
	RAISE NOTICE 'Time taken to load bronze.crm_cust_info: %', elapsed_time;

	start_time:= CLOCK_TIMESTAMP();
	BEGIN
		-- create the bronze.crm_prd_info table
		DROP TABLE IF EXISTS bronze.crm_prd_info CASCADE;
		CREATE TABLE IF NOT EXISTS bronze.crm_prd_info (
			prd_id INT,
			prd_key VARCHAR(50),
			prd_nm VARCHAR(50),
			prd_cost INT,
			prd_line VARCHAR(50),
			prd_start_dt TIMESTAMP,
			prd_end_dt TIMESTAMP
		);
		
		-- Truncate the table
		-- copy the data from the csv file into the database
		RAISE NOTICE 'Truncate Table: bronze.crm_prd_info';
		TRUNCATE TABLE bronze.crm_prd_info;
		
		RAISE NOTICE 'Insert Data Into: bronze.crm_prd_info';
		COPY bronze.crm_prd_info (prd_id, prd_key,prd_nm,prd_cost,prd_line, prd_start_dt, prd_end_dt)
			FROM 'C:\Users\Stanford\Documents\SQL\sql-data-warehouse-project\sql-data-warehouse-project\datasets\source_crm\prd_info.csv' 
			DELIMITER ',' CSV HEADER;
	
	EXCEPTION
		WHEN OTHERS THEN
			-- Catch any errors that occur and raise a notice
			RAISE NOTICE 'Error while loading bronze.crm_prd_info: %', SQLERRM;

	END;
	end_time := CLOCK_TIMESTAMP();
	elapsed_time := end_time - start_time;
	RAISE NOTICE 'Time taken to load bronze.crm_prd_info: %', elapsed_time;

	start_time:= CLOCK_TIMESTAMP();
	BEGIN
		-- create the bronze.crm_sales_details table
		DROP TABLE IF EXISTS bronze.crm_sales_details CASCADE;
		CREATE TABLE IF NOT EXISTS bronze.crm_sales_details (
			sls_ord_num VARCHAR(50),
			sls_prd_key VARCHAR(50),
			sls_cust_id INT,
			sls_order_dt INT,
			sls_ship_dt INT,
			sls_due_dt INT,
			sls_sales INT,
			sls_quantity INT,
			sls_price INT
		);
		
		-- Truncate the table
		-- copy the data from the csv file into the database
		RAISE NOTICE 'Truncate Table: bronze.crm_sales_details';
		TRUNCATE TABLE bronze.crm_sales_details;
		
		RAISE NOTICE 'Insert Data Into: bronze.crm_sales_details';
		COPY bronze.crm_sales_details (sls_ord_num, sls_prd_key, sls_cust_id, sls_order_dt, sls_ship_dt,sls_due_dt,sls_sales,sls_quantity,sls_price)
			FROM 'C:\Users\Stanford\Documents\SQL\sql-data-warehouse-project\sql-data-warehouse-project\datasets\source_crm\sales_details.csv' 
			DELIMITER ',' CSV HEADER;

	EXCEPTION
		WHEN OTHERS THEN
			-- Catch any errors that occur and raise a notice
			RAISE NOTICE 'Error while loading bronze.crm_sales_detail %', SQLERRM;
		
	END;
	end_time := CLOCK_TIMESTAMP();
	elapsed_time:= end_time - start_time;
	RAISE NOTICE 'Time taken to load bronze.crm_sales_detail: %', elapsed_time;

	RAISE NOTICE '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++';
	RAISE NOTICE 'loading ERP tables';
	RAISE NOTICE '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++';

	start_time := CLOCK_TIMESTAMP();
	BEGIN
		-- create the bronze.erp_cust_az12 table
		DROP TABLE IF EXISTS bronze.erp_cust_az12 CASCADE;
		CREATE TABLE IF NOT EXISTS bronze.erp_cust_az12 (
			cid VARCHAR(50),
			bdate DATE,
			gen VARCHAR (50)
		);
		
		-- Truncate the table
		-- copy the data from the csv file into the database
		RAISE NOTICE 'Truncate Table: bronze.erp_cust_az12';
		TRUNCATE TABLE bronze.erp_cust_az12;
		
		RAISE NOTICE 'Insert Data Into: bronze.erp_cust_az12';
		COPY bronze.erp_cust_az12 (cid, bdate, gen)
			FROM 'C:\Users\Stanford\Documents\SQL\sql-data-warehouse-project\sql-data-warehouse-project\datasets\source_erp\CUST_AZ12.csv' 
			DELIMITER ',' CSV HEADER;

	EXCEPTION
		WHEN OTHERS THEN
			-- Catch any errors that occur and raise a notice
			RAISE NOTICE 'Error while loading bronze.erp_cust_az12 %', SQLERRM;
		
	END;
	end_time := CLOCK_TIMESTAMP();
	elapsed_time := end_time - start_time;
	RAISE NOTICE 'Time taken to load bronze.erp_cust_az12: %', elapsed_time;

	start_time := CLOCK_TIMESTAMP();	
	BEGIN
		-- create the bronze.erp_loc_a101 table
		DROP TABLE IF EXISTS bronze.erp_loc_a101 CASCADE;
		CREATE TABLE IF NOT EXISTS bronze.erp_loc_a101 (
			cid VARCHAR(50),
			cntry VARCHAR(50)
		);
		
		-- Truncate the table
		-- copy the data from the csv file into the database
		RAISE NOTICE 'Truncate Table: bronze.erp_loc_a101';
		TRUNCATE TABLE bronze.erp_loc_a101; 
		
		RAISE NOTICE 'Insert Data Into: bronze.erp_loc_a101';
		COPY bronze.erp_loc_a101 (cid, cntry)
			FROM 'C:\Users\Stanford\Documents\SQL\sql-data-warehouse-project\sql-data-warehouse-project\datasets\source_erp\LOC_A101.csv' 
			DELIMITER ',' CSV HEADER;

	EXCEPTION
		WHEN OTHERS THEN
		RAISE NOTICE 'Error while loading bronze.erp_loc_a101: %', SQLERRM;

	END;
	end_time := CLOCK_TIMESTAMP();
	elapsed_time := end_time - start_time;
	RAISE NOTICE 'Time taken to load bronze.erp_loc_a101: %', elapsed_time;

	start_time := CLOCK_TIMESTAMP();	
	BEGIN
		-- create the bronze.erp_px_cat_g1v2 table
		DROP TABLE IF EXISTS bronze.erp_px_cat_g1v2 CASCADE;
		CREATE TABLE IF NOT EXISTS bronze.erp_px_cat_g1v2 (
			id VARCHAR(50),
			cat VARCHAR(50), 
			subcat VARCHAR(50),
			maintenance VARCHAR(50)
		);
		
		-- Truncate the table
		-- copy the data from the csv file into the database
		RAISE NOTICE 'Truncate Table: bronze.erp_px_cat_g1v2';
		TRUNCATE TABLE bronze.erp_px_cat_g1v2;
		
		RAISE NOTICE 'Insert Data Into: bronze.erp_px_cat_g1v2';
		COPY bronze.erp_px_cat_g1v2 (id, cat, subcat, maintenance)
			FROM 'C:\Users\Stanford\Documents\SQL\sql-data-warehouse-project\sql-data-warehouse-project\datasets\source_erp\PX_CAT_G1V2.csv' 
			DELIMITER ',' CSV HEADER;

	EXCEPTION
		WHEN OTHERS THEN
		RAISE NOTICE 'Error while loading bronze.erp_px_cat_g1v2 %', SQLERRM;
	END;
	end_time := CLOCK_TIMESTAMP();
	elapsed_time := end_time - start_time;
	bronze_elapsed_time := end_time - bronze_start_time;
	RAISE NOTICE 'Time taken to load bronze.erp_px_cat_g1v2: %', elapsed_time;

	RAISE NOTICE '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++';
	RAISE NOTICE 'Bronze Layer successfully loaded in %', bronze_elapsed_time;
	RAISE NOTICE '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++';


END;
$$;
	

